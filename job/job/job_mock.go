// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CH3CHO/GoMultiModuleTest/core/service (interfaces: SayHelloService)

// Package mock_service is a generated GoMock package.
package job

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSayHelloService is a mock of SayHelloService interface
type MockSayHelloService struct {
	ctrl     *gomock.Controller
	recorder *MockSayHelloServiceMockRecorder
}

// MockSayHelloServiceMockRecorder is the mock recorder for MockSayHelloService
type MockSayHelloServiceMockRecorder struct {
	mock *MockSayHelloService
}

// NewMockSayHelloService creates a new mock instance
func NewMockSayHelloService(ctrl *gomock.Controller) *MockSayHelloService {
	mock := &MockSayHelloService{ctrl: ctrl}
	mock.recorder = &MockSayHelloServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSayHelloService) EXPECT() *MockSayHelloServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockSayHelloService) SayHello(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SayHello indicates an expected call of SayHello
func (mr *MockSayHelloServiceMockRecorder) SayHello(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockSayHelloService)(nil).SayHello), arg0)
}
